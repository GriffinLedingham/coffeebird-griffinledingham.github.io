// Generated by CoffeeScript 1.6.3
var canReplay, getCookie, grav, highscore, jump, pipeHeight, pipeWidth, pipes, playerDead, playerJump, playerScore, pos, rot, score, screenClick, setBigScore, setCookie, setHighScore, setMedal, setSmallScore, showScore, showSplash, start, state, tick, update, updateInterval, updatePipes, updatePlayer, vel,
  _this = this;

vel = rot = state = tick = highscore = score = 0;

pos = 150;

grav = .25;

jump = -4.6;

pipeHeight = 90;

pipeWidth = 52;

pipes = [];

canReplay = false;

updateInterval = void 0;

start = function() {
  state = 1;
  $('#title').stop();
  $('#title').transition({
    opacity: 0
  }, 200, 'ease');
  setBigScore(false);
  return updateInterval = setInterval(update, 1000 / 60);
};

update = function() {
  var bot, box, ceiling, h, height, left, pipe, pipeBottom, pipeLeft, pipeRight, pipeTop, player, right, top, topPipe, w, width;
  tick += 1;
  if (tick % 70 === 0) {
    updatePipes();
  }
  player = $('#player');
  vel += grav;
  pos += vel;
  updatePlayer(player);
  box = document.getElementById("player").getBoundingClientRect();
  w = 34.0;
  h = 24.0;
  width = w - (Math.sin(Math.abs(rot) / 90) * 8);
  height = (h + box.height) / 2;
  left = ((box.width - width) / 2) + box.left;
  right = left + width;
  top = ((box.height - height) / 2) + box.top;
  bot = top + height;
  if (box.bottom >= $("#land").offset().top) {
    playerDead();
  }
  ceiling = $("#ceiling");
  if (top < 46) {
    pos = 5;
  }
  if (pipes[0] == null) {
    return;
  }
  pipe = pipes[0];
  topPipe = pipe.children(".pipe_upper");
  pipeTop = topPipe.offset().top + topPipe.height();
  pipeLeft = topPipe.offset().left - 2;
  pipeRight = pipeLeft + pipeWidth;
  pipeBottom = pipeTop + pipeHeight;
  if (right > pipeLeft) {
    if (top < pipeTop || bot > pipeBottom) {
      playerDead();
    }
  }
  if (left > pipeRight) {
    pipes.splice(0, 1);
    return playerScore();
  }
};

showSplash = function() {
  state = 0;
  vel = 0;
  pos = 180;
  rot = 0;
  score = 0;
  $("#player").css({
    y: 0,
    x: 0
  });
  updatePlayer($("#player"));
  $(".pipe").remove();
  pipes = [];
  $(".animated").css("animation-play-state", "running");
  $(".animated").css("-webkit-animation-play-state", "running");
  return $("#title").transition({
    opacity: 1
  }, 1000, "ease");
};

updatePlayer = function(player) {
  rot = Math.min((vel / 10) * 90, 90);
  return $(player).css({
    rotate: rot,
    top: pos
  });
};

screenClick = function() {
  if (state === 1) {
    return playerJump();
  } else if (state === 0) {
    start();
    return playerJump();
  }
};

playerJump = function() {
  return vel = jump;
};

playerDead = function() {
  var del, floor, playerbottom;
  $(".animated").css("animation-play-state", "paused");
  $(".animated").css("-webkit-animation-play-state", "paused");
  playerbottom = $("#player").position().top + $("#player").width();
  floor = $("#stage").height();
  del = Math.max(0, floor - playerbottom);
  $("#player").transition({
    rotate: 90
  }, 500, 'easeInOutCubic', function() {
    return $("#player").transition({
      y: del + 'px'
    }, 700, 'easeInOutCubic');
  });
  state = 2;
  clearInterval(updateInterval);
  updateInterval = null;
  return showScore();
};

updatePipes = function() {
  var bottomheight, constraint, newpipe, padding, topheight;
  $(".pipe").filter(function() {
    return $(this).position().left <= -100;
  }).remove();
  padding = 80;
  constraint = 420 - pipeHeight - (padding * 2);
  topheight = Math.floor((Math.random() * constraint) + padding);
  bottomheight = (420 - pipeHeight) - topheight;
  newpipe = $("<div class=\"pipe animated\"><div class=\"pipe_upper\" style=\"height: " + topheight + "px;\"></div><div class=\"pipe_lower\" style=\"height: " + bottomheight + "px;\"></div></div>");
  $("#stage").append(newpipe);
  return pipes.push(newpipe);
};

showScore = function() {
  var medal;
  $("#scoreboard").css("display", "block");
  setBigScore(true);
  if (score > highscore) {
    highscore = score;
    setCookie("highscore", highscore, 999);
  }
  setSmallScore();
  setHighScore();
  medal = setMedal();
  $("#scoreboard").css({
    y: "40px",
    opacity: 0
  });
  $("#replay").css({
    y: "40px",
    opacity: 0
  });
  $("#scoreboard").transition({
    y: "0px",
    opacity: 1
  }, 600, "ease", function() {
    $("#replay").transition({
      y: "0px",
      opacity: 1
    }, 600, "ease");
    if (medal) {
      $("#medal").css({
        scale: 2,
        opacity: 0
      });
      return $("#medal").transition({
        opacity: 1,
        scale: 1
      }, 1200, "ease");
    }
  });
  return canReplay = true;
};

playerScore = function() {
  score += 1;
  return setBigScore();
};

$("#replay").click(function() {
  if (!canReplay) {
    return;
  } else {
    canReplay = false;
  }
  return $("#scoreboard").transition({
    y: "-40px",
    opacity: 0
  }, 1000, "ease", function() {
    $("#scoreboard").css("display", "none");
    return showSplash();
  });
});

setBigScore = function(erase) {
  var digits, elemscore, i, _i, _ref, _results;
  elemscore = $("#score");
  elemscore.empty();
  if (erase) {
    return;
  }
  digits = score.toString().split("");
  _results = [];
  for (i = _i = 0, _ref = digits.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    _results.push(elemscore.append("<img src='assets/font_big_" + digits[i] + ".png' alt='" + digits[i] + "'>"));
  }
  return _results;
};

setSmallScore = function() {
  var digits, elemscore, i, _i, _ref, _results;
  elemscore = $("#currentscore");
  elemscore.empty();
  digits = score.toString().split("");
  _results = [];
  for (i = _i = 0, _ref = digits.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    _results.push(elemscore.append("<img src='assets/font_small_" + digits[i] + ".png' alt='" + digits[i] + "'>"));
  }
  return _results;
};

setHighScore = function() {
  var digits, elemscore, i, _i, _ref, _results;
  elemscore = $("#highscore");
  elemscore.empty();
  digits = highscore.toString().split("");
  _results = [];
  for (i = _i = 0, _ref = digits.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    _results.push(elemscore.append("<img src='assets/font_small_" + digits[i] + ".png' alt='" + digits[i] + "'>"));
  }
  return _results;
};

setMedal = function() {
  var elemmedal, medal;
  elemmedal = $("#medal");
  elemmedal.empty();
  if (score < 10) {
    return false;
  }
  if (score >= 10) {
    medal = "bronze";
  }
  if (score >= 20) {
    medal = "silver";
  }
  if (score >= 30) {
    medal = "gold";
  }
  if (score >= 40) {
    medal = "platinum";
  }
  elemmedal.append("<img src=\"assets/medal_" + medal + ".png\" alt=\"" + medal + "\">");
  return true;
};

getCookie = function(cname) {
  var c, ca, i, name, _i, _ref;
  name = cname + "=";
  ca = document.cookie.split(";");
  for (i = _i = 0, _ref = ca.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    c = ca[i].trim();
    if (c.indexOf(name) === 0) {
      return c.substring(name.length, c.length);
    }
  }
  return "";
};

setCookie = function(cname, cvalue, exdays) {
  var d, expires;
  d = new Date();
  d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
  expires = "expires=" + d.toGMTString();
  return document.cookie = cname + "=" + cvalue + "; " + expires;
};

$(document).ready(function() {
  var savedscore;
  savedscore = getCookie("highscore");
  if (savedscore !== "") {
    highscore = parseInt(savedscore);
  }
  return showSplash();
});

$("#replay").click(function() {
  if (!canReplay) {
    return;
  } else {
    canReplay = false;
  }
  return $("#scoreboard").transition({
    y: "-40px",
    opacity: 0
  }, 1000, "ease", function() {
    $("#scoreboard").css("display", "none");
    return showSplash();
  });
});

$(document).keydown(function(e) {
  if (e.keyCode === 32) {
    if (state === 2) {
      $("#replay").click();
    } else {
      screenClick();
    }
  }
});

if ("ontouchstart" in window) {
  $(document).on("touchstart", screenClick);
} else {
  $(document).on("mousedown", screenClick);
}
